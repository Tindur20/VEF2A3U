1.
Public - er hægt að kalla hvar sem er,fyrir utan class-an og innan í class-anum
Protected - Er hægt að kalla frá einungis innan núverandi class-a
Private - Getur aðeins verið kallað eftir inniheldur class-a

Property - //veit ekki hvað ég á að skrifa hér\\  property er t.d. "var $loudName" <- þetta er í php-panda bókinni
Methods - eru það sem við kölum function sem tilheyrir classes

2.
Inheritance er vel þekkt forritun meginreglu og PHP nýtir þessa reglu í hlut líkan.
Þessi meginregla mun hafa áhrif á hvernig margir tímar og hlutir sköpuðu anna.

dæmi:


3.
Namespace eru hönnuð til að leysa tvö vandamál sem höfundar bókasöfnum og forrit lendir
þegar skapa endurnýtanlegum kóða þætti ss classes eða functions.

4.
<?php 
     class Book
  {
      public $title;
       public $price;


      // Method

     public function setPrice($price)
     {
     	$this->price = $price;
     }

     public function getPrice(){
      return $this->price;
     }

    public function setTitle($title) 
     {
      $this->title = $title;    
     }
     public function getTitle(){
      return $this->title;
     }
  }

?>

5.
<?php 
     class Book
  {
     public $title;
       public $price;


      // Method

     public function setPrice($price)
     {
     	$this->price = $price;
     }

     public function getPrice(){
      return $this->price;
     }

    public function setTitle($title) 
     {
      $this->title = $title;    
     }
     public function getTitle(){
      return $this->title;
     }


     class Novel extends Book
     {
      public  $publisher;
      public function setPublisher($publisher)
      {
          $this->publisher = $publisher;
      }
      public function getPublisher()
      {
          return $this->publisher;
      }
     }
  }

?>

6.
7.
<?php

class User
{
  var $email;
  var $password;

  function setEmail($email){
    $this->email = $email;
  }
  function getEmail(){
    return $this->email;
  }

  function setPassword($password){
    $this->password = $password;  
  }
  function getPassword(){
    return $this->password;
  }
}

?>
//Veit ekki hvort þetta sé rétt eða ekki.

8.
af hverju ætti ég að nota OOP í php?


Hvenær væri það hugsanlega heppilegt og hvenær
ekki?

þegar þú ert að fara vinna með helling af functions þá er heppilegt að nota oop til að hafa
þær í klössum sem geta runnað allt sem er í honum á sama tíma.
þegar það er ekki heppilegt að nota það er þegar þú ert með lítinn codea þá er pinu overkill að nota oop í það.